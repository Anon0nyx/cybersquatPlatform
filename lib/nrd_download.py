import os
import sys
import requests
import tempfile
import datetime
import shutil
import base64
import zipfile
import chardet

def print_red(text):
    print(f'\033[91m{text}\033[0m')

def print_green(text):
    print(f'\033[92m{text}\033[0m')

def print_cyan(text):
    print(f'\033[96m{text}\033[0m')

def error(text):
    print_red(text)
    sys.exit(1)

def create_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def download_file(url, filepath):
    response = requests.get(url)
    if response.status_code == 200:
        with open(filepath, 'wb') as f:
            f.write(response.content)
    else:
        error(f'Failed to download file from {url}')

def extract_zip(zip_filepath, extract_to):
    with zipfile.ZipFile(zip_filepath, 'r') as zip_ref:
        zip_ref.extractall(extract_to)

def detect_encoding(filepath):
    with open(filepath, 'rb') as f:
        raw_data = f.read()
    result = chardet.detect(raw_data)
    return result['encoding']

def count_lines(filepath):
    with open(filepath, 'rb') as f:
        return sum(1 for line in f if line.strip())

script_dir = os.path.dirname(os.path.realpath(__file__))
day_range = int(os.getenv('DAY_RANGE', 7))
daily_dir = os.getenv('DAILY_DIR', 'daily')
temp_file = os.path.join(tempfile.gettempdir(), 'nrd_temp.txt')

paid_whoisds_username = os.getenv('PAID_WHOISDS_USERNAME', '')
paid_whoisds_password = os.getenv('PAID_WHOISDS_PASSWORD', '')

base_url_free = 'https://whoisds.com/whois-database/newly-registered-domains'
base_url_paid = f'https://whoisds.com/your-download/direct-download_file/{paid_whoisds_username}/{paid_whoisds_password}'

comment = f'# NRD list generated by nrd-list-downloader, on {datetime.datetime.now().strftime("%Y-%m-%d")}, data source: WhoisDS.com'

os.chdir(script_dir)

print_green('You are using nrd-list-downloader to download NRD (Newly Registered Domain) list ...')
print_cyan(f'NRD list of the last {day_range} days will be downloaded.')

def insert_into_temp_file(text):
    with open(temp_file, 'a', encoding='utf-8') as f:
        f.write(f'{text}\n')

insert_into_temp_file(comment)

def download_list(download_type='free'):
    target_file = f'nrd-{day_range}days-{download_type}.txt'
    download_dir = os.path.join(daily_dir, download_type)
    create_directory(download_dir)

    print()
    print_cyan(f'Downloading {download_type} NRD list ...')

    if download_type == 'free' and day_range > 10:
        print_red('Warning! Free NRD list older than 10 days might have been removed from WhoisDS.com, the download may fail.')
    if download_type == 'paid' and day_range > 30:
        print_red('Warning! Paid NRD list older than 30 days might have been removed from WhoisDS.com, the download may fail.')

    for i in range(day_range, 0, -1):
        date_str = (datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(days=i)).strftime('%Y-%m-%d')
        zip_path = os.path.join(download_dir, f'{date_str}.zip')
        extract_dir = os.path.join(download_dir, date_str)
        create_directory(extract_dir)

        if os.path.exists(zip_path) and os.path.getsize(zip_path) > 0:
            print_cyan(f'{zip_path} exists, skipping the download process ...')
        else:
            print(f'Downloading {date_str} data ... ', end='')
            if download_type == 'paid':
                url = f'{base_url_paid}/{date_str}.zip/ddu'
            else:
                free_url_infix = base64.b64encode(f'{date_str}.zip'.encode()).decode()[:-1]
                url = f'{base_url_free}/{free_url_infix}/nrd'
            download_file(url, zip_path)
            print_cyan('done.')

        print(f'Extracting {zip_path} ... ', end='')
        extract_zip(zip_path, extract_dir)
        print_cyan('done.')

        insert_into_temp_file(f'# {date_str} NRD start')
        for root, dirs, files in os.walk(extract_dir):
            for file in files:
                file_path = os.path.join(root, file)
                encoding = detect_encoding(file_path)
                with open(file_path, 'r', encoding=encoding, errors='ignore') as f:
                    for line in f:
                        insert_into_temp_file(line)
        insert_into_temp_file(f'# {date_str} NRD end')

    insert_into_temp_file(comment)
    shutil.move(temp_file, target_file)
    print_green(f'NRD list for the last {day_range} days saved to {target_file}, {count_lines(target_file)} domains found.')
    print()
"""
download_list('free')

if paid_whoisds_username and paid_whoisds_password:
    print_green('WhoisDS paid account found! Will try to download the paid premium NRD package with it.')
    download_list('paid')
"""
